
#include <iostream>
#include <string>
#include <vector>
using namespace std;
class Pilot;
class Plane;
// PROBLEM 2 //////////////////////////////////
// single container (struct)
struct Flight {

    //innitialize inputs for struct named, "Flight"
    string from;
    string to;
    int distance;

    Flight(const string& from, const string& to, int distance)
        : from(from), to(to), distance(distance) {}
};

//Question 6
//Add below plane class
class Pilot
{
private:
    string name;

public:
    //Constructor
    Pilot(string name)
    {
        this->name = name;
        cout << "Pilot " << name << " with memory address " << this << " is at the gate and ready to board the plane." << endl;
        
    }
    //Destructor
    ~Pilot()
    {
        cout << "Pilot " << name << " is out of the airplane." << endl;
    }
    //Getter function for name
    string get_name() const
    {
        return name;
    }
    //Pointer to object in plane class
    Plane* myPlane;
};


// PROBLEM 3 & 4 /////////////////////////////////
class Plane {

    // initialize inputs for constructor
    string from;
    string to;

private:
    // private class members
    double pos;
    double vel;
    double dist;
    bool at_SCE;
    string origin;
    string destination;
    Pilot* pilot;
    Pilot* copilot;
    //fix this container addition: how do I reference the container in a class

public:
    //public class memmbers

        //constructor
    Plane(const string& from, const string& to) :from(from), to(to), pos(0), vel(0),
    dist(0), origin(from), destination(to), at_SCE(true), pilot(nullptr), copilot(nullptr) {   /*assign string variables "from" and
                                                                                                "to" to "origin" and "destination" variables*/
        
        std::cout << "Plane created at: " << this << std::endl;  //print out the memory address of plane
       
    };

    //reference the memory address
    Plane() {
        std::cout << "Plane created at: " << this << std::endl;
    }

    //deconstructor
    ~Plane() {
        std::cout << "Plane Destroyed" << std::endl;
    }
    std::vector<Flight> flight_distance;
   
    void set_pilots(Pilot* pilot_name, Pilot* copilot_name) {
            pilot = pilot_name;
            copilot = copilot_name;
        }
    
    
    //getter functions
    // make constant so that they always return the value of corresponding variable
    double get_pos() const { return pos; }
    std::string get_origin() const { return origin; }
    std::string get_destination() const { return destination; }
    bool get_at_SCE() const { return at_SCE; }
    double vel_func_get() const { return vel; }
    // set velocity
    void set_vel(double velocity) { vel = velocity; }
    //void get_dist() const {return distance;}

    void get_distance() {
        for (const auto& flight : flight_distance) {
            if (flight.from == origin && flight.to == destination) {
                dist = flight.distance;
                return;
            }
            else if (flight.from == destination && flight.to == origin) {
                dist = flight.distance;
                return;
            }
        }
        dist = 0; // If no flight matches, set distance to 0
    }


    // function that returns nothing
    void operate(double dt) {

        get_distance();
        if (pos <= dist) {
            pos += vel / 3600 * dt;
           
            at_SCE = 0; //false
            return;

        }
        else {
            if (destination == "SCE") {   // yes
                at_SCE = 1; //true
                swap(pilot, copilot);
                swap(pilot->myPlane, copilot->myPlane);
                cout << "The plane " << this << "is at SCE" << endl;
                if (pilot) {
                    cout << "Pilot " << pilot->get_name() << " with certificate number " << pilot << " is in control of the plane: " << this << endl;
                }
                if (copilot) {
                    cout << "Pilot " << copilot->get_name() << " with certificate number " << copilot << " is in control of the plane: " << "0x0" << '\n' << endl;
                }
               
            }
            else {

            }
            cout << "Flight from " << origin << " to " << destination << " finished. On to the next leg" << endl; //this displays at end of timestep too - how to fix?
            std::swap(origin, destination);
            std::swap(from, to);
            
            pos = 0.0;
            return;
        }
    }

};


void swap (Pilot*& pilot, Pilot*& copilot)
{
    swap(pilot, copilot);
    swap(pilot->myPlane, copilot->myPlane);
}


int main() {
    //create object to reference memory address


    string origin = "SCE";
    string destination = "PHL";
    Plane plane("SCE", "PHL");

    // create a vector flight, then push the data of each flight into that vector
    std::vector<Flight> flight_distance;
    flight_distance.emplace_back("SCE", "PHL", 160);
    flight_distance.emplace_back("SCE", "ORD", 640);
    flight_distance.emplace_back("SCE", "EWR", 220);

    // referencing flight_distance in the class Plane
    plane.flight_distance = flight_distance;

    //Question 5
    plane.set_vel(450);
    double timeStep = 15;
    timeStep = timeStep;

    int maxIterations = 1500;
    int q5Iterations = 0;

    Pilot pilot("Alpha");
    Pilot copilot("Beta");
    plane.set_pilots(&pilot,&copilot);
    while (q5Iterations <= maxIterations)
    {
        //std::cout << "Time = " << timeStep * q5Iterations << "seconds.  Position = " << plane.get_pos() << "miles. \n";
        plane.operate(timeStep);
        ++q5Iterations;

        if (plane.get_at_SCE()) {
            
        }
    }
    // Question 7
   
    //pilot.myPlane = &plane;
    //copilot.myPlane = &plane;


   // std::cout << pilot.myPlane << std::endl;
   // std::cout << copilot.myPlane << std::endl;

    //pilot = alpha
    //copilot= beta

    // out name, memory address, memory address of plane
    // print out who is in control of the plane
    int q7Iterations = q5Iterations;

    while (q7Iterations <= maxIterations)
    {
        
        if (q7Iterations == 0)
        {
            
        }
        
        plane.operate(timeStep);
        q7Iterations++;
    }

    return 0;
}
